# -*- mode: ruby -*-
# vim: set ft=ruby :

MACHINES = {
  :"lesson04-zfs" => {
        :box_name => "centos/8_4",
        :box_url => "https://cloud.centos.org/centos/8/x86_64/images/CentOS-8-Vagrant-8.4.2105-20210603.0.x86_64.vagrant-virtualbox.box",
	:disks => {
		:sata1 => {
			:dfile => './sata1.vdi',
			:size => 1024,
			:port => 1
		},
		:sata2 => {
                        :dfile => './sata2.vdi',
                        :size => 1024,
                        :port => 2
                }

	}
  }
}

Vagrant.configure("2") do |config|

  MACHINES.each do |boxname, boxconfig|

      config.vm.define boxname do |box|

          box.vm.box = boxconfig[:box_name]
          box.vm.box_url = boxconfig[:box_url]
          box.vm.host_name = boxname.to_s

          box.vm.provider :virtualbox do |vb|
                  vb.customize ["modifyvm", :id, "--memory", "1024", "--cpus", "2"]
                               
                  unless File.exist?("./sata1.vdi")
                       vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]
                  end

		  boxconfig[:disks].each do |dname, dconf|
			  unless File.exist?(dconf[:dfile])
				vb.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Standard', '--size', dconf[:size]]
                                vb.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
                          end
		  end
          end

          box.vm.provision "shell", inline: <<-SHELL
              if [[ ! -a ~root/.ssh/authorized_keys ]]
              then
	      mkdir -p ~root/.ssh
              cp ~vagrant/.ssh/auth* ~root/.ssh
              echo "sudo -i" >> .bashrc
              dnf -y install epel-release
              dnf -y install nano kernel-devel kernel-headers
              dnf -y install https://zfsonlinux.org/epel/zfs-release.el8_3.noarch.rpm
              gpg --import --import-options show-only /etc/pki/rpm-gpg/RPM-GPG-KEY-zfsonlinux 
              dnf -y install zfs
              modprobe zfs
              dnf clean all
              # ZFS version:
              zfs -V
              fi
          SHELL

      end
  end
end

